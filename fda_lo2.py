# -*- coding: utf-8 -*-
"""FDA LO2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19HoMSPkoa1V1HuRbVrTZGOvnwTYKeHaW
"""

import pandas as pd
import numpy as np
import scipy.stats as stats
import statsmodels.api as sm
from statsmodels.formula.api import ols
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv('production_quality_data.csv')

#Checking for null values
data.isnull().sum()

#Function for Exploratory Data Analysis (EDA)
def exploratory_data_analysis(data):
    print("Data Head:\n", data.head())
    print("\nData Description:\n", data.describe())

    # Pairplot
    sns.pairplot(data)
    plt.show()

#Calling function
exploratory_data_analysis(data)

# Conduct statistical tests
def statistical_tests(data):
    # ANOVA: Analyzing the effect of Temperature and Humidity on Quality Score
    model = ols('Quality_Score ~ Temperature + Humidity', data=data).fit()
    anova_table = sm.stats.anova_lm(model, typ=2)
    print("\nANOVA Table:\n", anova_table)

    # T-Test: Checking the effect of Production Time on Quality Score
    production_time_median = data['Production_Time'].median()
    group1 = data[data['Production_Time'] <= production_time_median]['Quality_Score']
    group2 = data[data['Production_Time'] > production_time_median]['Quality_Score']
    t_stat, p_val = stats.ttest_ind(group1, group2)
    print("\nT-Test Results:\n", f"T-Statistic: {t_stat}, P-Value: {p_val}")

#Calling function
statistical_tests(data)

# Propose strategies for improving product quality
def propose_strategies(data):
    # Exclude non-numeric columns
    numeric_data = data.select_dtypes(include=[np.number])

    # Correlation analysis
    correlation_matrix = numeric_data.corr()
    print("\nCorrelation Matrix:\n", correlation_matrix)

    # Based on the analysis, suggest strategies
    print("\nProposed Strategies for Improving Product Quality:")
    print("1. Maintain temperature within an optimal range to avoid negative impact on quality.")
    print("2. Control humidity levels to ensure they do not adversely affect product quality.")
    print("3. Optimize production times to balance efficiency and quality.")

#Calling function
propose_strategies(data)

# Build and evaluate a machine learning model
def build_ml_model(data):
    # Prepare the data
    X = data[['Temperature', 'Humidity']]
    y = data['Quality_Score']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    # Build the Linear Regression model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Predict on the test set
    y_pred = model.predict(X_test)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    print("\nModel Performance:")
    print(f"Mean Squared Error: {mse}")
    print(f"R-squared: {r2}")

    # Accuracy: R-squared value represents the proportion of the variance in the dependent variable
    # that is predictable from the independent variables. An R-squared value close to 1 indicates a
    # model that explains a high proportion of the variance.
    accuracy = r2
    print(f"Accuracy: {accuracy}")
    return model, accuracy

# Run the functions

model, accuracy = build_ml_model(data)

# Check if the model accuracy is greater than 0.90
if accuracy > 0.90:
    print("The model is well-performing with an accuracy greater than 0.90.")
else:
    print("The model accuracy is less than 0.90. Consider further tuning the model.")